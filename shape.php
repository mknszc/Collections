<?php

/**
 * Created by PhpStorm.
 * User: Ã–Z
 * Date: 21.05.2016
 * Time: 14:14
 */

/*
 * Polymorphism example
 */
interface shape {
    public function area();
}

class circle implements shape {
    private $radius;

    public function __construct($radius) {
        $this->radius = $radius;
    }

    /**
     * @return mixed
     */
    public function area() {
        // TODO: Implement area() method.
        return $this->radius * $this->radius * pi();
    }
}

class rectangle implements shape {
    protected $height;
    protected $width;

    public function  __construct($height, $width) {
        $this->height = $height;
        $this->width = $width;
    }

    /**
     * @return mixed
     */
    public function area() {
        // TODO: Implement area() method.
        return $this->height * $this->width;
    }
}

class square extends rectangle {
    public $edge;

    /**
     * square constructor.
     * @param $edge
     */
    public function  __construct($edge) {
        $this->height = $edge;
        $this->width = $edge;
    }

    public function area() {
        return parent::area(); // TODO: Change the autogenerated stub
    }
}

class trigon implements shape {
    private $x;
    private $y;
    private $z;
    private $halfPerimeter;

    public function __construct($x, $y, $z) {
        $this->x = $x;
        $this->y = $y;
        $this->z = $z;
    }

    public function area() {
        // TODO: Implement area() method.
        $this->halfPerimeter = ($this->x + $this->y + $this->z) / 2 ;
        return sqrt(($this->halfPerimeter) * ($this->halfPerimeter - $this->x) *
                    ($this->halfPerimeter -$this->y) * ($this->halfPerimeter - $this->z));
    }
}



